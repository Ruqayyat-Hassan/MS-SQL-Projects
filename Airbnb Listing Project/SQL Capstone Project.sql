--Case Study / Capstone Project

-- 1. Find the neighborhood with the highest total revenue and the average price per listing
SELECT TOP 1 neighbourhood, SUM(price) AS Highest_revenue, AVG(price) AS AVG_Price
FROM airbnb_listings
GROUP BY neighbourhood
ORDER BY 2 DESC

-- Extra: Total Revenue
SELECT SUM(price) AS Highest_revenue
FROM airbnb_listings

-- Extra: Neighbourhood and the total revenue generated with ranking
SELECT neighbourhood, SUM(price) AS Highest_revenue, AVG(price) AS AVG_Price, RANK() OVER (ORDER BY SUM(price) DESC) AS Revenue_Rank
FROM airbnb_listings
GROUP BY neighbourhood
ORDER BY 1

-- 2. Compare the average price of listings in different neighborhoods
SELECT neighbourhood, AVG(price) AS AVG_Price
FROM airbnb_listings
GROUP BY neighbourhood
ORDER BY 2 DESC

-- 3. Count the occurrences of the word "comfortable" in the comment's column
SELECT COUNT(*) AS Number_of_comments
FROM airbnb_reviews
WHERE comments LIKE '%comfortable%'

-- Extra:Total Number of comments
SELECT COUNT(*) AS Number_of_comments
FROM airbnb_reviews

-- 4. Identify listings with a high proportion of positive reviews(comments with “great”, “comfortable” and “good”)
SELECT listing_id, COUNT(*) AS Number_of_positive_reviews
FROM airbnb_reviews
WHERE comments LIKE '%comfortable%' OR comments LIKE 'great' OR comments LIKE 'good'
GROUP BY listing_id
ORDER BY 2 DESC

-- Extra:Total Number of positive reviews
SELECT COUNT(*) AS Number_of_positive_reviews
FROM airbnb_reviews
WHERE comments LIKE '%comfortable%' OR comments LIKE 'great' OR comments LIKE 'good'

-- Extra:Showing neighbourhoods of listings with higher number of positive reviews
SELECT al.neighbourhood, COUNT(*) AS Number_of_positive_reviews
FROM airbnb_reviews ar
JOIN airbnb_listings al ON ar.listing_id = al.id
WHERE comments LIKE '%comfortable%' OR comments LIKE 'great' OR comments LIKE 'good'
GROUP BY al.neighbourhood
ORDER BY 2 DESC

-- 5. Calculate the total revenue generated by each host for listings that were last reviewed within the past one year
/* Revenue for 'Past one year' was calculated with consideration of the latest date in the date column (last_review).
Below, 2 methods were used to find total revenue generated within the past one year */

-- 1st Method
SELECT host_id, host_name, SUM(price) AS Total_revenue, last_review
FROM airbnb_listings
WHERE last_review >= '2023-06-01'
GROUP BY host_id, host_name, last_review
ORDER BY 3 DESC

-- 2nd Method: Using a Sub-query
SELECT host_id, host_name, SUM(price) AS Total_revenue, last_review
		-- DATEDIFF(MONTH,last_review,(SELECT MAX(last_review) FROM airbnb_listings)) AS One_year_ago
FROM airbnb_listings
WHERE DATEDIFF(MONTH,last_review,(SELECT MAX(last_review)
									FROM airbnb_listings)) <=12
GROUP BY host_id, host_name, last_review
ORDER BY 4 DESC

-- 6. Find hosts with the name ‘Stan’, regardless of capitalization
SELECT host_name
FROM airbnb_listings
WHERE host_name LIKE '_tan'

-- 7. Calculate the total revenue generated by listings with a price above $700
SELECT SUM(price) AS Total_Revenue
FROM airbnb_listings
WHERE price > 700

-- 8. Find the most reviewed listing
SELECT TOP 1 listing_id, Count(*) reviews 
FROM airbnb_reviews
GROUP BY listing_id
ORDER BY 2 DESC

-- Extra: Finiding Neighbourhood of the most reviewed listing and hostname
SELECT Count(*) reviews, neighbourhood
FROM airbnb_reviews ar
JOIN airbnb_listings al ON ar.listing_id =al.id
GROUP BY neighbourhood
ORDER BY 1 DESC

-- 9. Find listings that were last reviewed in the last quarter of 2022
SELECT id, last_review
FROM airbnb_listings
WHERE YEAR(last_review) = '2022' AND DATEPART(QUARTER,last_review) = '4'

-- 10. Calculate the total revenue generated for each listing, categorizing them as "high-priced" or "low-priced" 
-- based on their price relative to the average price for their neighborhood

WITH Neighbourhood_avg_price
AS
(
	SELECT neighbourhood, AVG(price) AS AVG_Price
	FROM airbnb_listings
	GROUP BY neighbourhood
)
SELECT id, al.neighbourhood, SUM(price) AS Total_revenue, AVG_Price, 
		CASE WHEN SUM(price) > AVG_Price
		THEN 'high_priced'
		ELSE 'low-priced'
		END AS Price_Category
FROM airbnb_listings al
JOIN Neighbourhood_avg_price np ON al.neighbourhood = np.neighbourhood
-- WHERE al.neighbourhood = ''
GROUP BY id, al.neighbourhood, AVG_Price
ORDER BY 3 DESC
